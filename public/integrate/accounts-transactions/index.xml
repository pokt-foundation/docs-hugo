<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accounts and Transactions on Pocket Network</title>
    <link>https://docs.pokt.network/integrate/accounts-transactions/</link>
    <description>Recent content in Accounts and Transactions on Pocket Network</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://docs.pokt.network/integrate/accounts-transactions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Account Generation and Validation</title>
      <link>https://docs.pokt.network/integrate/accounts-transactions/account-generation-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.pokt.network/integrate/accounts-transactions/account-generation-validation/</guid>
      <description>The simplest way to generate new accounts, or addresses, on the POKT blockchain is to use the official Pocket client, PocketJS.
Creating a New Account To create a new account on the POKT blockchain and export it:
import { Pocket } from &amp;#39;@pokt-network/pocket-js&amp;#39; // PocketJS must always be initialized with at least one dispatcher. const POCKET_DISPATCHER = &amp;#39;https://dispatch-1.nodes.pokt.network:4201&amp;#39; const pocket = new Pocket(POCKET_DISPATCHER) // The passphrase used to encrypt the private key while in memory: const PASSPHRASE = &amp;#39;foobar&amp;#39; const account = await pocket.</description>
    </item>
    <item>
      <title>Transaction Construction</title>
      <link>https://docs.pokt.network/integrate/accounts-transactions/transaction-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.pokt.network/integrate/accounts-transactions/transaction-construction/</guid>
      <description>Sending a Transaction To send a transaction on the POKT blockchain:
import { Pocket } from &amp;#39;@pokt-network/pocket-js&amp;#39; const RECEIVER_ADDRESS = &amp;#39;...&amp;#39; const SENDER_ADDRESS = &amp;#39;...&amp;#39; const SENDER_PRIVATE_KEY = &amp;#39;...&amp;#39; // The passphrase used to encrypt the private key while in memory: const PASSPHRASE = &amp;#39;foobar&amp;#39; // PocketJS must always be initialized with at least one dispatcher. const POCKET_DISPATCHER = &amp;#39;https://dispatch-1.nodes.pokt.network:4201&amp;#39; // To send a transaction, you can use one of the public RPCs or // your own Pocket node.</description>
    </item>
    <item>
      <title>Transaction Verification</title>
      <link>https://docs.pokt.network/integrate/accounts-transactions/transaction-verification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.pokt.network/integrate/accounts-transactions/transaction-verification/</guid>
      <description>Confirming that Funds have been Received // The 64-character transaction hash is necessary to retrieve the transaction: const tx = await pocket.query.getTX(hash) if (typeGuard(tx, RpcError)) { throw new Error(tx.message) } // The retrieved transaction object: console.log(tx) The return code of the transaction must be 0 â€” indicating success:
&amp;#34;tx_result&amp;#34;: {&amp;#34;code&amp;#34;: 0,&amp;#34;codespace&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;data&amp;#34;: null,&amp;#34;events&amp;#34;: null,&amp;#34;info&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;log&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;message_type&amp;#34;: &amp;#34;send&amp;#34;,&amp;#34;recipient&amp;#34;: &amp;#34;...&amp;#34;,&amp;#34;signer&amp;#34;: &amp;#34;...&amp;#34;} Consult the error types in Pocket Core for information on failed transactions.</description>
    </item>
  </channel>
</rss>